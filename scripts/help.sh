#!/bin/bash

echo "üìã AYUDA DEL SISTEMA E-COMMERCE CON REINFORCEMENT LEARNING"
echo "==========================================================="
echo ""
echo "üöÄ COMANDOS PRINCIPALES:"
echo ""
echo "1Ô∏è‚É£  INICIALIZACI√ìN COMPLETA:"
echo "   ./scripts/initialize_complete_system.sh"
echo "   ‚îî‚îÄ Inicia todo el sistema desde cero de manera automatizada"
echo ""
echo "2Ô∏è‚É£  VALIDACI√ìN DEL SISTEMA:"
echo "   ./scripts/validate_system.sh"
echo "   ‚îî‚îÄ Verifica que todos los servicios est√©n funcionando correctamente"
echo ""
echo "3Ô∏è‚É£  COMANDOS DOCKER B√ÅSICOS:"
echo "   docker-compose up -d                    # Iniciar todos los servicios"
echo "   docker-compose down                     # Detener todos los servicios"
echo "   docker-compose down -v                  # Detener y eliminar vol√∫menes"
echo "   docker ps                               # Ver contenedores corriendo"
echo "   docker ps -a                            # Ver todos los contenedores"
echo ""
echo "4Ô∏è‚É£  SERVICIOS INDIVIDUALES:"
echo "   docker-compose up -d cassandra redis    # Solo servicios base"
echo "   docker-compose up -d rl-component       # Solo componente RL"
echo "   docker-compose up -d api                # Solo API backend"
echo ""
echo "5Ô∏è‚É£  LOGS Y DEPURACI√ìN:"
echo "   docker logs ecommerce-rl                # Logs del sistema RL"
echo "   docker logs ecommerce-cassandra         # Logs de Cassandra"
echo "   docker logs ecommerce-api               # Logs del API"
echo "   docker logs ecommerce-ingesta           # Logs de ingesta"
echo "   docker-compose logs -f                  # Todos los logs en tiempo real"
echo ""
echo "üìä URLS DE SERVICIOS:"
echo ""
echo "üéØ DASHBOARDS PRINCIPALES:"
echo "   ‚Ä¢ RL Dashboard: http://localhost:8050"
echo "   ‚Ä¢ Frontend Principal: http://localhost:5174"
echo "   ‚Ä¢ API Backend: http://localhost:3003"
echo ""
echo "üîß HERRAMIENTAS DE MONITOREO:"
echo "   ‚Ä¢ Flink Dashboard: http://localhost:8081"
echo "   ‚Ä¢ Kafka UI: http://localhost:8089"
echo "   ‚Ä¢ Cassandra Web: http://localhost:3005"
echo "   ‚Ä¢ Redis Commander: http://localhost:8088"
echo ""
echo "üîç HEALTH CHECKS:"
echo "   ‚Ä¢ RL API Health: curl http://localhost:5000/health"
echo "   ‚Ä¢ Backend Health: curl http://localhost:3003/health"
echo "   ‚Ä¢ RL Metrics: curl http://localhost:5000/api/v1/rl/agent/state"
echo ""
echo "üõ†Ô∏è  COMANDOS DE MANTENIMIENTO:"
echo ""
echo "   # Reiniciar solo RL component"
echo "   docker-compose restart rl-component"
echo ""
echo "   # Regenerar datos de inventario"
echo "   docker-compose exec cassandra cqlsh -f /docker-entrypoint-initdb.d/05-inventory-rl-tables.cql"
echo ""
echo "   # Limpiar y reiniciar todo"
echo "   docker-compose down -v && ./scripts/initialize_complete_system.sh"
echo ""
echo "   # Ver m√©tricas de Cassandra"
echo "   docker-compose exec cassandra cqlsh -e \"USE ecommerce_analytics; SELECT COUNT(*) FROM inventory_current;\""
echo ""
echo "üìÅ ESTRUCTURA DEL PROYECTO:"
echo ""
echo "   1.0_ingesta/         # Productor Kafka para datos transaccionales"
echo "   2.0_kafka/           # Configuraci√≥n de Kafka"
echo "   3.0_flink/           # Jobs de procesamiento en tiempo real"
echo "   4.0_cassandra/       # Esquemas y configuraci√≥n de base de datos"
echo "   5.0_redis/           # Configuraci√≥n de cache"
echo "   6.0_app/             # Frontend y backend APIs"
echo "   7.0_rl/              # Sistema de Reinforcement Learning"
echo "   scripts/             # Scripts de automatizaci√≥n"
echo ""
echo "üîÑ FLUJO T√çPICO DE TRABAJO:"
echo ""
echo "   1. Asegurar que Docker Desktop est√© corriendo"
echo "   2. Ejecutar: ./scripts/initialize_complete_system.sh"
echo "   3. Esperar que termine la inicializaci√≥n (5-10 minutos)"
echo "   4. Validar: ./scripts/validate_system.sh"
echo "   5. Acceder al RL Dashboard: http://localhost:8050"
echo ""
echo "‚ùì RESOLUCI√ìN DE PROBLEMAS:"
echo ""
echo "   üî¥ Si el dashboard muestra ceros:"
echo "      ./scripts/validate_system.sh      # Verificar estado"
echo "      docker logs ecommerce-rl          # Ver logs RL"
echo ""
echo "   üî¥ Si Cassandra no inicia:"
echo "      docker-compose down -v"
echo "      docker system prune -f"
echo "      ./scripts/initialize_complete_system.sh"
echo ""
echo "   üî¥ Si hay errores de puerto:"
echo "      netstat -an | findstr :8050        # Verificar puertos en uso"
echo "      docker-compose down               # Liberar puertos"
echo ""
echo "üìû SOPORTE:"
echo "   - Revisar logs con docker logs [container_name]"
echo "   - Verificar puertos con netstat o docker ps"
echo "   - Reinicializar con el script completo"
echo ""
echo "üéâ ¬°El sistema est√° dise√±ado para funcionar autom√°ticamente despu√©s de ejecutar initialize_complete_system.sh!" 