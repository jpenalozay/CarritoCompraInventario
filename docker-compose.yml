name: ecommerce-analytics

services:
  # Zookeeper Service
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ecommerce-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecommerce-network
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 20

  # Kafka Service
  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: ecommerce-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./2.0_kafka/config/server.properties:/etc/kafka/server.properties:ro
    networks:
      - ecommerce-network
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 10

  # Cassandra Service
  cassandra:
    image: cassandra:latest
    container_name: ecommerce-cassandra
    ports:
      - "9042:9042"
    volumes:
      - cassandra-data:/var/lib/cassandra
      - ${PWD}/4.0_cassandra/schemas:/docker-entrypoint-initdb.d
    environment:
      - CASSANDRA_CLUSTER_NAME=ecommerce_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Service
  redis:
    image: redis:latest
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./5.0_redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # Flink JobManager
  jobmanager:
    build:
      context: ./3.0_flink
      dockerfile: Dockerfile
    container_name: ecommerce-jobmanager
    ports:
      - "8081:8081"
      - "6123:6123"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    volumes:
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/savepoints:/opt/flink/savepoints
      - ./logs/flink:/opt/flink/log
      - ./3.0_flink/jobs:/opt/flink/jobs
    networks:
      - ecommerce-network

  # Flink TaskManagers
  taskmanager-1:
    build:
      context: ./3.0_flink
      dockerfile: Dockerfile
    container_name: ecommerce-taskmanager-1
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    volumes:
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/savepoints:/opt/flink/savepoints
      - ./logs/flink:/opt/flink/log
      - ./3.0_flink/jobs:/opt/flink/jobs
    networks:
      - ecommerce-network

  taskmanager-2:
    build:
      context: ./3.0_flink
      dockerfile: Dockerfile
    container_name: ecommerce-taskmanager-2
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    volumes:
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/savepoints:/opt/flink/savepoints
      - ./logs/flink:/opt/flink/log
      - ./3.0_flink/jobs:/opt/flink/jobs
    networks:
      - ecommerce-network

  taskmanager-3:
    build:
      context: ./3.0_flink
      dockerfile: Dockerfile
    container_name: ecommerce-taskmanager-3
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    volumes:
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/savepoints:/opt/flink/savepoints
      - ./logs/flink:/opt/flink/log
      - ./3.0_flink/jobs:/opt/flink/jobs
    networks:
      - ecommerce-network

  # Flink Job Runner (Automático)
  flink-job-runner:
    build:
      context: ./3.0_flink
      dockerfile: Dockerfile
    container_name: ecommerce-flink-job-runner
    depends_on:
      - jobmanager
      - taskmanager-1
      - taskmanager-2
      - taskmanager-3
      - kafka
      - cassandra
      - redis
    command: >
      sh -c "
        echo '🚀 Iniciando job de Flink automáticamente...' &&
        python3 jobs/stream_processor.py
      "
    volumes:
      - ./3.0_flink/jobs:/opt/flink/jobs
      - ./logs/flink:/opt/flink/log
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Servicio de Ingesta
  ingesta:
    build:
      context: ./1.0_ingesta
      dockerfile: Dockerfile
    container_name: ecommerce-ingesta
    depends_on:
      - kafka
      - kafka-topic-init
    volumes:
      - ./1.0_ingesta/data:/app/data
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATASET_PATH=/app/data/online_retail.xlsx
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "test", "-f", "/app/data/online_retail.xlsx"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # REDIS COMMANDER (Web UI para Redis)
  # ========================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    ports:
      - "8088:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # ========================================
  # CASSANDRA WEB UI
  # ========================================
  cassandra-web:
    image: ipushc/cassandra-web:latest
    container_name: cassandra-web
    ports:
      - "3005:3000"
    environment:
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Servicios de Monitoreo
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8089:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - ecommerce-network

  # ========================================
  # REINFORCEMENT LEARNING COMPONENT
  # ========================================
  rl-component:
    build:
      context: ./7.0_rl
      dockerfile: Dockerfile
    container_name: ecommerce-rl
    ports:
      - "5000:5000"  # API RL
      - "8050:8050"  # Dashboard RL
    environment:
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RL_API_PORT=5000
      - DASH_PORT=8050
    depends_on:
      cassandra:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========================================
  # API BACKEND
  # ========================================
  api:
    build:
      context: ./6.0_app/backend
      dockerfile: Dockerfile
    container_name: ecommerce-api
    ports:
      - "3003:3001"
    environment:
      - NODE_ENV=development
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_KEYSPACE=ecommerce_analytics
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RL_API_URL=http://rl-component:5000
    depends_on:
      cassandra:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      rl-component:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========================================
  # FRONTEND DASHBOARD
  # ========================================
  analytics-dashboard:
    build:
      context: ./6.0_app/frontend
      dockerfile: Dockerfile
    container_name: ecommerce-dashboard
    ports:
      - "5174:5173"
    environment:
      - VITE_API_BASE_URL=http://localhost:3003/api/v1
      - VITE_WS_URL=ws://localhost:3003
    networks:
      - ecommerce-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========================================
  # LOAD BALANCER / REVERSE PROXY
  # ========================================
  nginx:
    build:
      context: ./6.0_app/nginx
      dockerfile: Dockerfile
    container_name: ecommerce-nginx
    ports:
      - "80:80"
    depends_on:
      - analytics-dashboard
      - api
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Servicio de inicialización de tópicos Kafka
  kafka-topic-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-topic-init
    depends_on:
      - kafka
    command: >
      bash -c "
        echo Waiting for Kafka to be ready...;
        cub kafka-ready -b kafka:9092 1 30;
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic ecommerce_transactions;
        echo 'Topics created.';
        sleep infinity"
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    name: ecommerce-network
    driver: bridge

volumes:
  cassandra-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local